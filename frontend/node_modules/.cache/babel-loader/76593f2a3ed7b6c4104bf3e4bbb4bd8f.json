{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\stock app\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\stock app\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\stock app\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\stock app\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\stock app\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\stock app\\\\frontend\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    _this.getDataFromDb = function () {\n      fetch(\"/api/stocks\").then(function (data) {\n        return data.text();\n      }).then(function (data) {\n        return console.log(data);\n      }); //      .then(res=> this.setState({ data: res.data}));\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    //when component first mounts, it fetchs existing data in db\n    value: function componentDidMount() {\n      this.getDataFromDb();\n\n      if (!this.state.intervalIsSet) {\n        var interval = setInterval(this.getDataFromDb, 1000);\n        this.setState({\n          intervalIsSet: interval\n        });\n      }\n    } //kill process\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({\n          intervalIsSet: null\n        });\n      }\n    } //fetch data from database\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var data = this.state.data;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, data.length <= 0 ? \"NO DB ENTRIES YET\" : data.map(function (dat) {\n        return React.createElement(\"li\", {\n          style: {\n            padding: \"10px\"\n          },\n          key: data.message,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          style: {\n            color: \"gray\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, \" id: \"), \" \", dat.id, \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          style: {\n            color: \"gray\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, \" data: \"), dat.message);\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\stock app\\frontend\\src\\App.js"],"names":["React","Component","axios","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","text","console","log","interval","setInterval","setState","clearInterval","length","map","dat","padding","color"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAGMC,G;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,EAAE,EAAE,CAFE;AAGNC,MAAAA,OAAO,EAAE,IAHH;AAINC,MAAAA,aAAa,EAAE,KAJT;AAKNC,MAAAA,UAAU,EAAE,IALN;AAMNC,MAAAA,UAAU,EAAE,IANN;AAONC,MAAAA,cAAc,EAAE;AAPV,K;;UA+BRC,a,GAAgB,YAAM;AACpBC,MAAAA,KAAK,CAAC,aAAD,CAAL,CACGC,IADH,CACQ,UAAAT,IAAI;AAAA,eAAIA,IAAI,CAACU,IAAL,EAAJ;AAAA,OADZ,EAEGD,IAFH,CAEQ,UAAAT,IAAI;AAAA,eAAGW,OAAO,CAACC,GAAR,CAAYZ,IAAZ,CAAH;AAAA,OAFZ,EADoB,CAIxB;AACG,K;;;;;;;AA1BD;wCACoB;AAClB,WAAKO,aAAL;;AACA,UAAI,CAAC,KAAKR,KAAL,CAAWI,aAAhB,EAA+B;AAC7B,YAAIU,QAAQ,GAAGC,WAAW,CAAC,KAAKP,aAAN,EAAqB,IAArB,CAA1B;AACA,aAAKQ,QAAL,CAAc;AACZZ,UAAAA,aAAa,EAAEU;AADH,SAAd;AAGD;AACF,K,CACH;;;;2CACyB;AACrB,UAAI,KAAKd,KAAL,CAAWI,aAAf,EAA8B;AAC5Ba,QAAAA,aAAa,CAAC,KAAKjB,KAAL,CAAWI,aAAZ,CAAb;AACA,aAAKY,QAAL,CAAc;AACZZ,UAAAA,aAAa,EAAE;AADH,SAAd;AAGD;AACF,K,CAED;;;;6BAQS;AAAA,UACCH,IADD,GACU,KAAKD,KADf,CACCC,IADD;AAEP,aACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,IAAI,CAACiB,MAAL,IAAe,CAAf,GACE,mBADF,GAECjB,IAAI,CAACkB,GAAL,CAAS,UAAAC,GAAG;AAAA,eACT;AAAI,UAAA,KAAK,EAAE;AAACC,YAAAA,OAAO,EAAE;AAAV,WAAX;AAA8B,UAAA,GAAG,EAAEpB,IAAI,CAACE,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAM,UAAA,KAAK,EAAE;AAAEmB,YAAAA,KAAK,EAAE;AAAT,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,OACgDF,GAAG,CAAClB,EADpD,OACwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADxD,EAEI;AAAM,UAAA,KAAK,EAAE;AAAEoB,YAAAA,KAAK,EAAE;AAAT,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,EAGKF,GAAG,CAACjB,OAHT,CADS;AAAA,OAAZ,CAHJ,CADF,CADD;AAeD;;;;EAzDeN,S;;AA4DlB,eAAeE,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from \"axios\";\n\n\nclass App extends Component {\n  //state initialization\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null\n  };\n\n  //when component first mounts, it fetchs existing data in db\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  }\n//kill process\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  }\n\n  //fetch data from database\n  getDataFromDb = () => {\n    fetch(\"/api/stocks\")\n      .then(data => data.text())\n      .then(data=> console.log(data));\n//      .then(res=> this.setState({ data: res.data}));\n  }\n\n  render() {\n    const { data } = this.state;\n    return (\n     <div>\n       <ul>\n         {data.length <= 0\n          ? \"NO DB ENTRIES YET\"\n          :data.map(dat => (\n              <li style={{padding: \"10px\"}} key={data.message}>\n                <span style={{ color: \"gray\" }}> id: </span> {dat.id} <br/>\n                  <span style={{ color: \"gray\" }}> data: </span>\n                  {dat.message}\n              </li>\n          ))}\n       </ul>\n     </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}