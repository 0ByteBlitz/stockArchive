{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\stock app\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\stock app\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\stock app\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\stock app\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\stock app\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\user\\\\Desktop\\\\stock app\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\stock app\\\\frontend\\\\src\\\\components\\\\stocktable.js\";\n\nimport React, { Component } from 'react';\nimport Footer from './footer';\nimport ReactTable from 'react-table';\nimport \"react-table/react-table.css\";\nimport \"../App.css\";\nimport _ from \"lodash\";\n\nvar rawData = function rawData() {\n  fetch(\"/api/stocks\").then(function (data) {\n    return data.json();\n  }).then(function (res) {\n    return _this.setState({\n      data: res.data\n    });\n  });\n};\n\nvar requestData = function requestData(pageSize, page, sorted, filtered) {\n  return new Promise(function (resolve, reject) {\n    // You can retrieve your data however you want, in this case, we will just use some local data.\n    var filteredData = rawData;\n\n    if (filtered.length) {\n      filteredData = filtered.reduce(function (filteredSoFar, nextFilter) {\n        return filteredSoFar.filter(function (row) {\n          return (row[nextFilter.id] + \"\").includes(nextFilter.value);\n        });\n      }, filteredData);\n    } // You can also use the sorting in your request, but again, you are responsible for applying it.\n\n\n    var sortedData = _.orderBy(filteredData, sorted.map(function (sort) {\n      return function (row) {\n        if (row[sort.id] === null || row[sort.id] === undefined) {\n          return -Infinity;\n        }\n\n        return typeof row[sort.id] === \"string\" ? row[sort.id].toLowerCase() : row[sort.id];\n      };\n    }), sorted.map(function (d) {\n      return d.desc ? \"desc\" : \"asc\";\n    })); // You must return an object containing the rows of the current page, and optionally the total pages number.\n\n\n    var res = {\n      rows: sortedData.slice(pageSize * page, pageSize * page + pageSize),\n      pages: Math.ceil(filteredData.length / pageSize)\n    }; // Here we'll simulate a server response with 500ms of delay.\n\n    setTimeout(function () {\n      return resolve(res);\n    }, 500);\n  });\n};\n\nvar Stocktable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Stocktable, _Component);\n\n  _createClass(Stocktable, [{\n    key: \"componentDidMount\",\n    //state initialization\n    //when component first mounts, it fetchs existing data in db\n    value: function componentDidMount() {\n      this.getDataFromDb();\n\n      if (!this.state.intervalIsSet) {\n        var interval = setInterval(this.getDataFromDb, 5000);\n        this.setState({\n          intervalIsSet: interval\n        });\n      }\n    } //kill process\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({\n          intervalIsSet: null\n        });\n      }\n    } //fetch data from database\n\n  }]);\n\n  //fetch 10 high performing stocks from database\n  function Stocktable() {\n    var _this2;\n\n    _classCallCheck(this, Stocktable);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Stocktable).call(this));\n    _this2.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    _this2.getDataFromDb = function () {\n      fetch(\"/api/stocks\").then(function (data) {\n        return data.json();\n      }).then(function (res) {\n        return _this2.setState({\n          data: res.data\n        });\n      });\n    };\n\n    _this2.state = {\n      data: [],\n      pages: null,\n      loading: true\n    };\n    _this2.fetchData = _this2.fetchData.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    return _this2;\n  }\n\n  _createClass(Stocktable, [{\n    key: \"fetchData\",\n    value: function fetchData(state, instance) {\n      var _this3 = this;\n\n      // Whenever the table model changes, or the user sorts or changes pages, this method gets called and passed the current table model.\n      // You can set the `loading` prop of the table to true to use the built-in one or show you're own loading bar if you want.\n      this.setState({\n        loading: true\n      }); // Request the data however you want.  Here, we'll use our mocked service we created earlier\n\n      requestData(state.pageSize, state.page, state.sorted, state.filtered).then(function (res) {\n        // Now just get the rows of data to your React Table (and update anything else like total pages or loading)\n        _this3.setState({\n          data: res.rows,\n          pages: res.pages,\n          loading: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          pages = _this$state.pages,\n          loading = _this$state.loading;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"reacTable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(ReactTable, {\n        data: data,\n        columns: [{\n          columns: [{\n            Header: \"Symbol\",\n            accessor: \"symbol\"\n          }]\n        }, {\n          Header: \"Stock Info\",\n          columns: [{\n            Header: \"Open\",\n            accessor: \"open\"\n          }, {\n            Header: \"Date\",\n            accessor: \"date\"\n          }, {\n            Header: \"Close\",\n            accessor: \"close\"\n          }, {\n            Header: \"Low\",\n            accessor: \"low\"\n          }, {\n            Header: \"High\",\n            accessor: \"high\"\n          }, {\n            Header: \"Volume\",\n            accessor: \"volume\"\n          }]\n        }],\n        pages: pages,\n        loading: loading,\n        onFetchData: this.fetchData,\n        filterable: true,\n        defaultPageSize: 10,\n        defaultSorted: [{\n          id: \"high\",\n          desc: true\n        }],\n        className: \"-striped -highlight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      })), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Stocktable;\n}(Component);\n\nexport default Stocktable;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\stock app\\frontend\\src\\components\\stocktable.js"],"names":["React","Component","Footer","ReactTable","_","rawData","fetch","then","data","json","res","setState","requestData","pageSize","page","sorted","filtered","Promise","resolve","reject","filteredData","length","reduce","filteredSoFar","nextFilter","filter","row","id","includes","value","sortedData","orderBy","map","sort","undefined","Infinity","toLowerCase","d","desc","rows","slice","pages","Math","ceil","setTimeout","Stocktable","getDataFromDb","state","intervalIsSet","interval","setInterval","clearInterval","message","idToDelete","idToUpdate","objectToUpdate","loading","fetchData","bind","instance","columns","Header","accessor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'; \r\nimport Footer from './footer';\r\nimport ReactTable from 'react-table';\r\nimport \"react-table/react-table.css\";\r\nimport \"../App.css\";\r\nimport _ from \"lodash\";\r\n\r\nconst rawData = () => {\r\n    fetch(\"/api/stocks\")\r\n        .then(data => data.json())\r\n        .then(res => this.setState({\r\n            data: res.data\r\n        }));\r\n};\r\n\r\nconst requestData = (pageSize, page, sorted, filtered) => {\r\n  return new Promise((resolve, reject) => {\r\n    // You can retrieve your data however you want, in this case, we will just use some local data.\r\n    let filteredData = rawData;\r\n     if (filtered.length) {\r\n         filteredData = filtered.reduce((filteredSoFar, nextFilter) => {\r\n             return filteredSoFar.filter(row => {\r\n                 return (row[nextFilter.id] + \"\").includes(nextFilter.value);\r\n             });\r\n         }, filteredData);\r\n     }\r\n    \r\n    // You can also use the sorting in your request, but again, you are responsible for applying it.\r\n    const sortedData = _.orderBy(\r\n      filteredData,\r\n      sorted.map(sort => {\r\n        return row => {\r\n          if (row[sort.id] === null || row[sort.id] === undefined) {\r\n            return -Infinity;\r\n          }\r\n          return typeof row[sort.id] === \"string\"\r\n            ? row[sort.id].toLowerCase()\r\n            : row[sort.id];\r\n        };\r\n      }),\r\n      sorted.map(d => (d.desc ? \"desc\" : \"asc\"))\r\n    );\r\n\r\n    // You must return an object containing the rows of the current page, and optionally the total pages number.\r\n    const res = {\r\n      rows: sortedData.slice(pageSize * page, pageSize * page + pageSize),\r\n      pages: Math.ceil(filteredData.length / pageSize)\r\n    };\r\n\r\n    // Here we'll simulate a server response with 500ms of delay.\r\n    setTimeout(() => resolve(res), 500);\r\n  });\r\n};\r\n\r\n\r\nclass Stocktable extends Component {\r\n    //state initialization\r\n  state = {\r\n    data: [],\r\n    id: 0,\r\n    message: null,\r\n    intervalIsSet: false,\r\n    idToDelete: null,\r\n    idToUpdate: null,\r\n    objectToUpdate: null\r\n  };\r\n\r\n  //when component first mounts, it fetchs existing data in db\r\n  componentDidMount() {\r\n    this.getDataFromDb();\r\n    if (!this.state.intervalIsSet) {\r\n      let interval = setInterval(this.getDataFromDb, 5000);\r\n      this.setState({\r\n        intervalIsSet: interval\r\n      });\r\n    }\r\n  }\r\n//kill process\r\n  componentWillUnmount() {\r\n    if (this.state.intervalIsSet) {\r\n      clearInterval(this.state.intervalIsSet);\r\n      this.setState({\r\n        intervalIsSet: null\r\n      });\r\n    }\r\n  }\r\n\r\n  //fetch data from database\r\n  getDataFromDb = () => {\r\n    fetch(\"/api/stocks\")\r\n      .then(data => data.json())\r\n      .then(res=> this.setState({ data: res.data}));\r\n  };\r\n\r\n\r\n  //fetch 10 high performing stocks from database\r\n  \r\nconstructor() {\r\n    super();\r\n    this.state = {\r\n      data: [],\r\n      pages: null,\r\n      loading: true\r\n    };\r\n    this.fetchData = this.fetchData.bind(this);\r\n  }\r\n  fetchData(state, instance) {\r\n    // Whenever the table model changes, or the user sorts or changes pages, this method gets called and passed the current table model.\r\n    // You can set the `loading` prop of the table to true to use the built-in one or show you're own loading bar if you want.\r\n    this.setState({ loading: true });\r\n    // Request the data however you want.  Here, we'll use our mocked service we created earlier\r\n    requestData(\r\n      state.pageSize,\r\n      state.page,\r\n      state.sorted,\r\n      state.filtered\r\n    ).then(res => {\r\n      // Now just get the rows of data to your React Table (and update anything else like total pages or loading)\r\n      this.setState({\r\n        data: res.rows,\r\n        pages: res.pages,\r\n        loading: false\r\n      });\r\n    });\r\n  }\r\n  render() {\r\n    const { data, pages, loading } = this.state;\r\n    return (\r\n        <div>\r\n     <div className=\"reacTable\">\r\n        <ReactTable\r\n        data = {\r\n          data\r\n        }\r\n        columns = {\r\n          [{\r\n              columns: [{\r\n                  Header: \"Symbol\",\r\n                  accessor: \"symbol\"\r\n                }]\r\n            },\r\n            {\r\n              Header: \"Stock Info\",\r\n              columns: [{\r\n                  Header: \"Open\",\r\n                  accessor: \"open\"\r\n                },\r\n                {\r\n                  Header: \"Date\",\r\n                  accessor: \"date\"\r\n                },\r\n                {\r\n                  Header: \"Close\",\r\n                  accessor: \"close\"\r\n                },\r\n                {\r\n                  Header: \"Low\",\r\n                  accessor: \"low\"\r\n                },\r\n                {\r\n                  Header: \"High\",\r\n                  accessor: \"high\"\r\n                },\r\n                {\r\n                  Header: \"Volume\",\r\n                  accessor: \"volume\"\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n        pages = {\r\n            pages\r\n        } \r\n        loading = {\r\n            loading\r\n        }\r\n        onFetchData = {\r\n            this.fetchData\r\n        }\r\n        filterable\r\n        defaultPageSize = {\r\n          10\r\n        }\r\n        defaultSorted = {\r\n          [{\r\n            id: \"high\",\r\n            desc: true\r\n          }]\r\n        }\r\n        \r\n        className = \"-striped -highlight\" />\r\n     </div>\r\n     <Footer />\r\n     </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Stocktable;"]},"metadata":{},"sourceType":"module"}